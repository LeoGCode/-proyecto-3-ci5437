#!/usr/bin/env ruby

require "json"
require "fileutils"
require_relative "../lib/utils"
require_relative "../lib/translator"

# Entry point for sat-planner
def main
  bin_name = File.basename($PROGRAM_NAME)

  # If no arguments, print usage
  if ARGV.empty?
    puts "#{bin_name}: No arguments provided"
    puts "Usage: #{bin_name} FILE [-d]"
    exit 1
  end

  filename = ARGV[0]
  debug = ARGV[1] == "-d"

  # Parse JSON file provided as argument, handle errors
  begin
    file = File.read(filename)
    data = JSON.parse(file)
  rescue Errno::ENOENT => e
    puts "#{bin_name}: #{filename}: No such file"
    exit 1
  rescue => e
    puts "#{bin_name}: #{filename}: Invalid file"
    exit 1
  end

  tournament_name = data["tournament_name"]
  n_participants = data["participants"].length
  n_days = get_days(data["start_date"], data["end_date"])
  n_hours = get_hours(data["start_time"], data["end_time"])

  # Print parsed data
  puts "Generating a schedule for the tournament '#{tournament_name}'"
  puts "  - #{n_participants} participants: #{data["participants"].join(", ")}"
  puts "  - To be played in #{n_days} days"
  puts "  - Among #{n_hours} hours of the day\n\n"

  if !makes_sense?(n_participants, n_days, n_hours)
    puts "The tournament you just planned doesn't even make sense, go to sleep ðŸ¦†"
    exit 0
  end

  cnf_filename = ""
  t_translation = 0
  thr = Thread.new do
    t_translation = measure_time {
      cnf_filename = translate_to_cnf(n_participants, n_days, n_hours, filename)
    }
  end

  # While wait for the thread to finish, show a loading animation
  begin
    while thr.alive?
      for i in 0..3
        print "\rWait while we're explaining your tournament to the computer ðŸ¥¬#{"." * i}#{" " * (3 - i)}"
        sleep 0.3
      end
    end
  rescue Interrupt
    puts "\rInterrupted! ðŸ¤¬#{" " * 112}"
    exit 1
  end
  puts "\rUnderstanding complete in #{t_translation} seconds! ðŸ’… (DIMACS translation generated in #{cnf_filename})\n\n"
  
  solution_filename = solve_cnf(cnf_filename, "glucose")

  if !debug
    FileUtils.rm_rf(cnf_filename)
  end

  solution = extract_solution(solution_filename, n_participants, n_days, n_hours)

  if !debug
    puts "\nCleaning DIMACS and SAT solution files... ðŸ§¹ (You can keep them with the -d flag)\n\n"
    FileUtils.rm_rf(".tmp_sat-planner")
  end

  if solution.empty?
    puts "A schedule for this tournament isn't possible, plan something else ðŸ¦§"
    exit 0
  end

  # Create .ics file from solution
  output_filename = ""
  t_ics = measure_time {
    output_filename = create_ics(
      solution,
      data["tournament_name"],
      data["participants"],
      data["start_date"],
      data["start_time"]
    )
  }

  puts "Calendar generated in #{t_ics} seconds! You can check your calendar at '#{output_filename}', have fun ðŸ“µ"
end

main if __FILE__ == $0
