#!/usr/bin/env ruby

require 'json'
require "fileutils"
require_relative '../lib/utils'
require_relative '../lib/transpiler'

# Entry point for sat-planner
def main
  bin_name = File.basename($PROGRAM_NAME)

  # If no arguments, print usage
  if ARGV.empty?
    puts "#{bin_name}: No arguments provided"
    puts "Usage: #{bin_name} FILE"
    exit 1
  end

  filename = ARGV[0]

  # Parse JSON file provided as argument, handle errors
  begin
    file = File.read(filename)
  rescue Errno::ENOENT => e
    puts "#{bin_name}: #{filename}: No such file"
    exit 1
  rescue => e
    puts "#{bin_name}: #{filename}: Invalid file"
    exit 1
  end

  data = JSON.parse(file)

  tournament_name = data["tournament_name"]
  n_participants = data["participants"].length
  n_days = get_days(data["start_date"], data["end_date"])
  n_hours = get_hours(data["start_time"], data["end_time"])

  # Print parsed data
  puts "Tournament: #{tournament_name}"
  puts "Participants: #{data["participants"].join(", ")}"
  puts "Days: #{n_days}"
  puts "Hours: #{n_hours}"

  # TODO: Ver cu√°ntas horas se necesitan para que por lo menos sea satisfacible,
  # y si no, reportar insatisfacible

  cnf_filename = translate_to_cnf(n_participants, n_days, n_hours, filename)
  solution_filename = solve_cnf(cnf_filename, "glucose")

  # Extract and map solution from file
  solution = extract_solution(solution_filename, n_participants, n_days, n_hours)
  if solution.empty?
    puts "No solution found"
    exit 0
  end

  # Create .ics file from solution
  output_filename = "#{tournament_name}.ics"
  ics = create_ics(
    solution,
    data["tournament_name"],
    data["participants"],
    data["start_date"],
    data["start_time"],
    output_filename
  )

  puts "Done! You can check your calendar at #{output_filename}, have fun!"
end

main if __FILE__ == $0
