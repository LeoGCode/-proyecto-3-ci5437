require 'fileutils'

require_relative '../lib/utils'
require_relative '../lib/constraints'

def translate_to_cnf(n_participants, n_days, n_hours, filename)
  n_available_hours = n_hours - 1
  n_variables = n_participants**2 * n_days * n_available_hours
  map_to_cnf = create_map_to_cnf(n_participants, n_days, n_available_hours)

  clauses = []

  args = [clauses, map_to_cnf, n_participants, n_days, n_available_hours]

  add_constraint_1!(*args)
  add_constraint_2!(*args)
  add_constraint_3!(*args)
  add_constraint_4!(*args)
  add_constraint_5!(*args)

  write_cnf_to_file(
    clauses,
    n_variables,
    "tmp/#{File.basename(filename, File.extname(filename))}_translation.cnf"
  )
end

def write_cnf_to_file(clauses, n_variables, filename)
  # Create the file if it doesn't exist
  FileUtils.mkdir_p(File.dirname(filename))

  File.open(filename, 'w') do |f|
    # Write header
    f.puts "c FILE: #{filename}"
    f.puts "c Generated by sat-planner v0.1.0"
    f.puts "c Chus, Ka (2023)"
    f.puts "c"

    # Write clauses
    f.puts "p cnf #{n_variables} #{clauses.size}"
    clauses.each do |clause|
      f.puts "#{clause.join(' ')} 0"
    end
  end
end